buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.7"
        classpath "org.ajoberstar:gradle-git:1.6.0"
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
    id "com.google.protobuf" version "0.8.17"
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group 'com.gotocompany'
version '0.6.0'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.23.2'
    implementation group: 'com.datadoghq', name: 'java-dogstatsd-client', version: '2.13.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.23.2'
    implementation group: 'com.gotocompany', name: 'stencil', version: '0.6.0' exclude group: 'org.slf4j'
    implementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.9'
    implementation (group: 'com.google.cloud', name: 'google-cloud-bigquerystorage', version: '2.39.1') {
        exclude group: "io.grpc"
    }
    implementation(group: 'com.google.cloud', name: 'google-cloud-bigquery', version: '2.29.0') {
        exclude group: "io.grpc"
    }
    implementation(group: 'com.google.cloud', name: 'google-cloud-bigtable', version: '2.24.1') {
        exclude group: "io.grpc"
    }
    implementation 'io.grpc:grpc-all:1.55.1'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.35'
    implementation group: 'redis.clients', name: 'jedis', version: '3.10.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'org.json:json:20230227'
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.8.0'

    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'com.github.tomakehurst:wiremock:2.16.0'
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.1'
    testImplementation group: 'io.opentracing', name: 'opentracing-mock', version: '0.33.0'
    testImplementation group: 'org.mock-server', name: 'mockserver-netty', version: '5.15.0'
    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}


test {
    beforeTest {
        descriptor -> logger.lifecycle("Running test: " + descriptor)
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed"
    }
    useJUnit {
    }
    doLast {
        delete "$projectDir/src/test/resources/__files"
    }

}
checkstyle {
    toolVersion '7.6.1'
    configFile rootProject.file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

clean {
    delete "$projectDir/src/test/resources/__files"
}

idea {
    module {
        testSourceDirs += file("$projectDir/src/generated/test/java")
    }
}
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"
    protoc {
        artifact = "com.google.protobuf:protoc:3.1.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.0.3"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = false
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.path = "$projectDir/src/test/resources/__files/descriptors.bin"
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            pom {
                groupId = project.group
                artifactId = project.name
                version = project.version
                name = 'Depot'
                description = 'A sink connector library containing multiple sink implementations'
                url = 'https://github.com/goto/depot'

                scm {
                    url = 'https://github.com/goto/depot.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'lavkesh'
                        name = 'Lavkesh Lahngir'
                        email = 'lavkesh51@gmail.com'
                    }
                }
                from components.java
            }
        }
    }
}

signing {
   sign publishing.publications.maven
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}
jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/config/**',
                              '**/**Factory**',
                              '**/exception/**',
                              '**/serializer/**',
                              '**/cortexpb/**',
                              '**/Clock**',
                              '**/GoGoProtos**',])
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
